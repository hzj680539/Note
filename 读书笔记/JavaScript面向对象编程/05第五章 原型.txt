原型属性：
函数本身也是一个包含了方法和属性的对象。
利用原型添加方法和属性：
Gadget.prototype.name = "Jim"
Gadget.prototype = { name: "Jim"， color: "black" }
使用原型的方法和属性：
var newtoy = new Gadget("Jim", "black")
>> newtoy.name
原型的实时性：
在JS中，对象都是传引用的方式来传递，我们创建的对象实体中没有一份属于自己的原型副本。
原型的prototype属性更改，对象的prototype属性也会随时更改。
对象属性与原型属性：
每个对象都有自己的构造器，原型本身就是一个对象，所以原型本身就是一个构造器，而这个构造器又有自己的原型。
这种结构会一直持续下去，并最终取决于原型链的长度，最后一环肯定是Object内建对象，因为它是最高级的父级对象。
如果一个对象自身属性中没有找到指定的属性，就会在原型链中查找相关的属性。
自身属性的优先级高于原型属性。
hasOwnProperty(): 判断一个属性是自身属性还是原型属性。
枚举属性：
for 适合数组
for/in 适合对象
在for/in循环中显示的属性称为是可枚举的。（propertyIsEnumerable()判断对象的某个属性是否可枚举）
所有的原型属性都是不可枚举的。
isPrototypeOf(): 判断当前对象是否是另一个对象的原型。
__proto__ ：是某个实例对象的属性
prototype： 是属于构造器函数的属性。
扩展内建对象：通过其原型进行扩展。
原型陷阱：重写对象的prototype时，需要重置相应的constructor属性。
